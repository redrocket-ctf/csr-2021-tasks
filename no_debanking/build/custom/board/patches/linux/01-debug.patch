diff --git a/kernel/ptrace.c b/kernel/ptrace.c
index 61db50f7ca86..9c9d579f2bd3 100644
--- a/kernel/ptrace.c
+++ b/kernel/ptrace.c
@@ -8,6 +8,14 @@
  * to continually duplicate across every architecture.
  */
 
+#include "linux/slab.h"
+#include <linux/dcache.h>
+#include <linux/path.h>
+#include <linux/err.h>
+#include <linux/limits.h>
+#include <linux/namei.h>
+#include <linux/printk.h>
+#include <asm-generic/errno-base.h>
 #include <linux/capability.h>
 #include <linux/export.h>
 #include <linux/sched.h>
@@ -31,6 +39,7 @@
 #include <linux/cn_proc.h>
 #include <linux/compat.h>
 #include <linux/sched/signal.h>
+#include <linux/xattr.h>
 
 #include <asm/syscall.h>	/* for syscall_get_* */
 
@@ -64,6 +73,60 @@ int ptrace_access_vm(struct task_struct *tsk, unsigned long addr,
 }
 
 
+int ptrace_access_any(struct task_struct *tsk) {
+	struct mm_struct *mm;
+	int ret = 0;
+	char* path_buf;
+	struct path npath;
+	char value[16];
+	char* path_ptr;
+	ssize_t res;
+
+	mm = get_task_mm(tsk);
+
+	if (!mm) {
+		printk("Failed to obtain mm.");
+		return 0;
+	}
+
+	path_buf = kmalloc(PATH_MAX, GFP_KERNEL);
+	path_ptr = d_path(&mm->exe_file->f_path, path_buf, PATH_MAX);
+	if (IS_ERR(path_ptr)) {
+		printk("Denying ptrace access for unkown path! Error: %li", PTR_ERR(path_ptr));
+		goto end;
+	}
+
+	if (strstr(path_ptr, "secret")) {
+		goto end;
+	}
+
+	if (kern_path(path_ptr, LOOKUP_FOLLOW, &npath) < 0) {
+		printk("File is broken now. Weird...");
+		goto end;
+	}
+
+ 	res = vfs_getxattr(npath.dentry, "security.nodebug", value, 16);
+ 	if (res == -E2BIG || res == -ERANGE) {
+ 		printk("Invalid attribute. Access denied.");
+		goto end;
+	}
+
+	if (res == -ENODATA) {
+		ret = 1;
+		goto end;
+	}
+
+	if (res > 0 && value[0] == '0') {
+		ret = 1;
+	}
+
+	end:
+	mmput(mm);
+	kfree(path_buf);
+	return ret;
+}
+
+
 void __ptrace_link(struct task_struct *child, struct task_struct *new_parent,
 		   const struct cred *ptracer_cred)
 {
@@ -279,6 +342,7 @@ static int __ptrace_may_access(struct task_struct *task, unsigned int mode)
 	kuid_t caller_uid;
 	kgid_t caller_gid;
 
+
 	if (!(mode & PTRACE_MODE_FSCREDS) == !(mode & PTRACE_MODE_REALCREDS)) {
 		WARN(1, "denying ptrace access check without PTRACE_MODE_*CREDS\n");
 		return -EPERM;
@@ -1003,6 +1067,10 @@ int ptrace_request(struct task_struct *child, long request,
 	unsigned long __user *datalp = datavp;
 	unsigned long flags;
 
+	if (!ptrace_access_any(child)) {
+		return -EPERM;
+	}
+
 	switch (request) {
 	case PTRACE_PEEKTEXT:
 	case PTRACE_PEEKDATA:
